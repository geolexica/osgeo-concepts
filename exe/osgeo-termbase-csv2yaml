#!/usr/bin/env ruby

require 'pp'
require 'pathname'
require 'fileutils'
require_relative '../lib/osgeo/termbase.rb'
# require 'pry'

abbrev_filepath = ARGV[0]
proposed_filepath = ARGV[1]

if abbrev_filepath.nil?
  puts 'Error: no abbrev_filepath given as first argument.'
  exit 1
end

if Pathname.new(abbrev_filepath).extname != ".csv"
  puts 'Error: abbrev_filepath given must have extension .csv.'
  exit 1
end

if proposed_filepath.nil?
  puts 'Error: no proposed_filepath given as second argument.'
  exit 1
end

if Pathname.new(proposed_filepath).extname != ".csv"
  puts 'Error: proposed_filepath given must have extension .csv.'
  exit 1
end

abbreviations_table_config = Osgeo::Termbase::Csv::Config.new(
  header_row_index: 2, term_abbrev_column: 0, comments_column: 5,
  definition_column: 6, source_link_column: 7,
)

# TODO Authoritative source is not a link
proposed_table_config = Osgeo::Termbase::Csv::Config.new(
  header_row_index: 5, term_preferred_column: 0, term_admitted_column: 1,
  term_abbrev_column: 2, definition_column: 5, comments_column: 6,
  source_comment_column: 7,
)

abbreviations = Osgeo::Termbase::Csv.new(abbrev_filepath, abbreviations_table_config).concepts
proposed = Osgeo::Termbase::Csv.new(proposed_filepath, proposed_table_config).concepts

# registries = {
#   "eng" => {
#     metadata: {},
#     terms: table.to_concept_collection
#   }
# }

output_dir = Dir.pwd

# metadata = {
#   'header' => workbook.glossary_info.metadata_section.to_hash["metadata"]
# }
# # Write registry metadata
# metadata['languages'] = registries.inject({}) do |acc, (lang, data)|
#   acc.merge({lang => data[:metadata]})
# end

# File.open(File.join(output_dir, Pathname.new(filepath).basename.sub_ext(".meta.yaml")),"w") do |file|
#   file.write(metadata.to_yaml)
# end


# Merge concept arrays
merged_terms = abbreviations + proposed
merged_terms.sort_by! { |t| t.default_designation.downcase }
merged_terms.each.with_index { |t, i| t.id = i + 1 } # Re-calculate ids

collection = Osgeo::Termbase::ConceptCollection.new
merged_terms.each { |t| collection.add_term(t) }

# Aggregated YAML
# collection.to_file(File.join(output_dir, Pathname.new(filepath).basename.sub_ext(".yaml")))

collection_output_dir = File.join(output_dir, "concepts")

FileUtils.mkdir_p(collection_output_dir)

collection.keys.each do |id|
  collection[id].to_file(File.join(collection_output_dir, "concept-#{id}.yaml"))
end
